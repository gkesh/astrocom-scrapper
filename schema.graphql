schema {
    query: Query
    mutation: Mutation
}

type Author {
    id: ID
    first_name: String!
    last_name: String!
    biography: String
}

input AuthorInput {
    first_name: String!
    last_name: String!
    biography: String
}

type Publisher {
    id: ID
    name: String!
    country: String
    history: String
}

input PublisherInput {
    name: String!
    country: String
    history: String
}

enum ComicType {
    MANGA,
    WESTERN,
    MANHUA,
    MANHWA,
    WEB
}

type Genre {
    id: ID
    name: String!
    description: String
}

input GenreInput {
    name: String!
    description: String
}

type Chapter {
    id: ID
    number: Float!
    title: String
    pages: Int!
    max: Int
    visited: Boolean
    checkpoint: Boolean
    date_released: String!
}

input ChapterInput {
    number: Float!
    title: String
    pages: Int!
    max: Int
}

type Comic {
    id: ID
    title: String
    code: String!
    source: String
    type: ComicType
    genres: [Genre]
    author: Author
    crawler: String
    publisher: Publisher
    chapters: [Chapter]
    count: Int
    ongoing: Boolean
    synopsis: String
    date_published: String
    date_updated: String
}

input ComicInput {
    title: String!
    source: String!
    type: ComicType!
    genres: [GenreInput]
    author: AuthorInput
    crawler: String
    publisher: PublisherInput
    chapters: [ChapterInput]
    ongoing: Boolean
    synopsis: String
    date_published: String
}

type Reader {
    id: ID
    username: String!
    email: String
    favorites: [Comic]
    date_birthed: String
    date_joined: String
}

type Selects {
    types: [ComicType]
    crawlers: [String]
}

interface Response {
    status: Boolean!
    error: [String]
}

type AuthorsResponse implements Response {
    status: Boolean!
    data: [Author]
    error: [String]
}

type PublishersResponse implements Response {
    status: Boolean!
    data: [Publisher]
    error: [String]
}

type ComicsResponse implements Response {
    status: Boolean!
    data: [Comic]
    error: [String]
}

type ComicResponse implements Response {
    status: Boolean!
    data: Comic
    error: [String]
}

type ChapterResponse implements Response {
    status: Boolean!
    data: Chapter
    error: [String]
}

type SelectsResponse implements Response {
    status: Boolean!
    data: Selects
    error: [String]
}

type IDResponse implements Response {
    status: Boolean!
    data: ID
    error: [String]
}

type Query {
    authors: AuthorsResponse!
    publishers: PublishersResponse!
    comics: ComicsResponse!
    comic(comic: String!): ComicResponse!
    titles: ComicsResponse!
    selects: SelectsResponse!
    chapters: ComicsResponse!
    chapter(comic: String!, number: Float!): ChapterResponse!
}

type Mutation {
    visited(comic: String!, chapter: Float!): Boolean!
    checkpoint(comic: String!, chapter: Float!): Boolean!
    download(comic: String!, start: Float, end: Float!): Boolean!
    add(comic: ComicInput!): IDResponse!
    delete(comic: String!): Boolean!
    clean(comic: String!): Boolean!
}